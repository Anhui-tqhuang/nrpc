// This code was autogenerated from helloworld.proto, do not edit.
package helloworld

import (
	"context"
	"log"
	"time"

	"github.com/golang/protobuf/proto"
	nats "github.com/nats-io/go-nats"
	"github.com/rapidloop/nrpc"
)

// GreeterServer is the interface that providers of the service
// Greeter should implement.
type GreeterServer interface {
	SayHello(ctx context.Context, req HelloRequest) (resp HelloReply, err error)
}

// GreeterHandler provides a NATS subscription handler that can serve a
// subscription using a given GreeterServer implementation.
type GreeterHandler struct {
	ctx    context.Context
	nc     *nats.Conn
	server GreeterServer
}

func NewGreeterHandler(ctx context.Context, nc *nats.Conn, s GreeterServer) *GreeterHandler {
	return &GreeterHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *GreeterHandler) Subject() string {
	return "Greeter"
}

func (h *GreeterHandler) Handler(msg *nats.Msg) {
	// decode the request
	name, inner, err := nrpc.Decode(msg.Data)
	if err != nil {
		return
	}

	// call handler and form response
	var resp proto.Message
	var errstr string
	switch name {
	case "SayHello":
		var innerReq HelloRequest
		if err := proto.Unmarshal(inner, &innerReq); err != nil {
			log.Printf("GreeterHandler: SayHello request unmarshal failed: %v", err)
			errstr = "bad request received: " + err.Error()
		} else if innerResp, err := h.server.SayHello(h.ctx, innerReq); err != nil {
			log.Printf("GreeterHandler: SayHello handler failed: %v", err)
			errstr = "handler error: " + err.Error()
		} else {
			resp = &innerResp
		}
	default:
		log.Printf("GreeterHandler: unknown name %q", name)
		errstr = "unknown name: " + name
	}

	// encode and send response
	nrpc.Publish(resp, errstr, h.nc, msg.Reply) // error is logged
}

type GreeterClient struct {
	nc      *nats.Conn
	Subject string
	Timeout time.Duration
}

func NewGreeterClient(nc *nats.Conn) *GreeterClient {
	return &GreeterClient{
		nc:      nc,
		Subject: "Greeter",
		Timeout: 5 * time.Second,
	}
}

func (c *GreeterClient) SayHello(req HelloRequest) (resp HelloReply, err error) {
	// call
	respBytes, err := nrpc.Call("SayHello", &req, c.nc, c.Subject, c.Timeout)
	if err != nil {
		return // already logged
	}

	// decode inner reponse
	if err = proto.Unmarshal(respBytes, &resp); err != nil {
		log.Printf("SayHello: response unmarshal failed: %v", err)
		return
	}

	return
}
