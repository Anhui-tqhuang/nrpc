// This code was autogenerated from helloworld.proto, do not edit.
package helloworld

import (
	"context"
	"log"
	"time"

	"github.com/golang/protobuf/proto"
	nats "github.com/nats-io/go-nats"
	"github.com/rapidloop/nrpc"
)

// GreeterServer is the interface that providers of the service
// Greeter should implement.
type GreeterServer interface {
	SayHello(ctx context.Context, req HelloRequest) (resp HelloReply, err error)
}

// GreeterHandler provides a NATS subscription handler that can serve a
// subscription using a given GreeterServer implementation.
type GreeterHandler struct {
	ctx    context.Context
	nc     *nats.Conn
	server GreeterServer
}

func NewGreeterHandler(ctx context.Context, nc *nats.Conn, s GreeterServer) *GreeterHandler {
	return &GreeterHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *GreeterHandler) Subject() string {
	return "Greeter.>"
}

func (h *GreeterHandler) Handler(msg *nats.Msg) {
	// extract method name & encoding from subject
	name, encoding, err := nrpc.ExtractFunctionNameAndEncoding(msg.Subject)

	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "SayHello":
		var req HelloRequest
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("SayHelloHandler: SayHello request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					innerResp, err := h.server.SayHello(h.ctx, req)
					if err != nil {
						return nil, err
					}
					return &innerResp, err
				})
			if replyError != nil {
				log.Printf("SayHelloHandler: SayHello handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("GreeterHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}

	// encode and send response
	err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	if err != nil {
		log.Println("GreeterHandler: Greeter handler failed to publish the response: %s", err)
	}
}

type GreeterClient struct {
	nc      *nats.Conn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewGreeterClient(nc *nats.Conn) *GreeterClient {
	return &GreeterClient{
		nc:      nc,
		Subject: "Greeter",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *GreeterClient) SayHello(req HelloRequest) (resp HelloReply, err error) {

	// call
	err = nrpc.Call(&req, &resp, c.nc, c.Subject+".SayHello", c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}
