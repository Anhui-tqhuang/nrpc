// This code was autogenerated from alloptions.proto, do not edit.
package main

import (
	"context"
	"log"
	"time"

	"github.com/golang/protobuf/proto"
	nats "github.com/nats-io/go-nats"
	"github.com/rapidloop/nrpc"
)

// SvcCustomSubjectServer is the interface that providers of the service
// SvcCustomSubject should implement.
type SvcCustomSubjectServer interface {
	MtSimpleReply(ctx context.Context, req StringArg) (resp SimpleStringReply, err error)
	MtFullReplyString(ctx context.Context, req StringArg) (resp string, err error)
}

// SvcCustomSubjectHandler provides a NATS subscription handler that can serve a
// subscription using a given SvcCustomSubjectServer implementation.
type SvcCustomSubjectHandler struct {
	ctx    context.Context
	nc     *nats.Conn
	server SvcCustomSubjectServer
}

func NewSvcCustomSubjectHandler(ctx context.Context, nc *nats.Conn, s SvcCustomSubjectServer) *SvcCustomSubjectHandler {
	return &SvcCustomSubjectHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *SvcCustomSubjectHandler) Subject() string {
	return "root.*.custom_subject.>"
}

func (h *SvcCustomSubjectHandler) Handler(msg *nats.Msg) {
	// extract method name & encoding from subject
	pkgParams, _, name, encoding, err := nrpc.ParseSubject(
		"root", 1, "custom_subject", 0, msg.Subject)

	ctx := h.ctx
	ctx = context.WithValue(ctx, "nrpc-pkg-instance", pkgParams[0])
	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "MtSimpleReply":
		var req StringArg
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("MtSimpleReplyHandler: MtSimpleReply request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					innerResp, err := h.server.MtSimpleReply(ctx, req)
					if err != nil {
						return nil, err
					}
					return &innerResp, err
				})
			if replyError != nil {
				log.Printf("MtSimpleReplyHandler: MtSimpleReply handler failed: %s", replyError.Error())
			}
		}
	case "MtFullReplyString":
		var req StringArg
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("MtFullReplyStringHandler: MtFullReplyString request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					result, err := h.server.MtFullReplyString(ctx, req)
					if err != nil {
						return nil, err
					}
					return &FullReplyString{
						&FullReplyString_Result{
							Result: result,
						},
					}, err
				})
			if replyError != nil {
				log.Printf("MtFullReplyStringHandler: MtFullReplyString handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("SvcCustomSubjectHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}

	// encode and send response
	err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	if err != nil {
		log.Println("SvcCustomSubjectHandler: SvcCustomSubject handler failed to publish the response: %s", err)
	}
}

type SvcCustomSubjectClient struct {
	nc      *nats.Conn
	PkgSubject string
	PkgParaminstance string
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewSvcCustomSubjectClient(nc *nats.Conn, pkgParaminstance string) *SvcCustomSubjectClient {
	return &SvcCustomSubjectClient{
		nc:      nc,
		PkgSubject: "root",
		PkgParaminstance: pkgParaminstance,
		Subject: "custom_subject",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}


func (c *SvcCustomSubjectClient) MtSimpleReply(req StringArg) (resp SimpleStringReply, err error) {

	subject := c.PkgSubject + "." + c.PkgParaminstance + "." + c.Subject + "." + "MtSimpleReply";

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

func (c *SvcCustomSubjectClient) MtFullReplyString(req StringArg) (resp string, err error) {

	subject := c.PkgSubject + "." + c.PkgParaminstance + "." + c.Subject + "." + "MtFullReplyString";

	// call
	var reply FullReplyString
	err = nrpc.Call(&req, &reply, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	resp = reply.GetResult()

	return
}
// SvcSubjectParamsServer is the interface that providers of the service
// SvcSubjectParams should implement.
type SvcSubjectParamsServer interface {
	MtFullReplyMessage(ctx context.Context, req StringArg) (resp SimpleStringReply, err error)
}

// SvcSubjectParamsHandler provides a NATS subscription handler that can serve a
// subscription using a given SvcSubjectParamsServer implementation.
type SvcSubjectParamsHandler struct {
	ctx    context.Context
	nc     *nats.Conn
	server SvcSubjectParamsServer
}

func NewSvcSubjectParamsHandler(ctx context.Context, nc *nats.Conn, s SvcSubjectParamsServer) *SvcSubjectParamsHandler {
	return &SvcSubjectParamsHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *SvcSubjectParamsHandler) Subject() string {
	return "root.*.SvcSubjectParams.*.>"
}

func (h *SvcSubjectParamsHandler) Handler(msg *nats.Msg) {
	// extract method name & encoding from subject
	pkgParams, svcParams, name, encoding, err := nrpc.ParseSubject(
		"root", 1, "SvcSubjectParams", 1, msg.Subject)

	ctx := h.ctx
	ctx = context.WithValue(ctx, "nrpc-pkg-instance", pkgParams[0])
	ctx = context.WithValue(ctx, "nrpc-svc-clientid", svcParams[0])
	// call handler and form response
	var resp proto.Message
	var replyError *nrpc.Error
	switch name {
	case "MtFullReplyMessage":
		var req StringArg
		if err := nrpc.Unmarshal(encoding, msg.Data, &req); err != nil {
			log.Printf("MtFullReplyMessageHandler: MtFullReplyMessage request unmarshal failed: %v", err)
			replyError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			resp, replyError = nrpc.CaptureErrors(
				func()(proto.Message, error){
					result, err := h.server.MtFullReplyMessage(ctx, req)
					if err != nil {
						return nil, err
					}
					return &FullReplyMessage{
						&FullReplyMessage_Result{
							Result: &result,
						},
					}, err
				})
			if replyError != nil {
				log.Printf("MtFullReplyMessageHandler: MtFullReplyMessage handler failed: %s", replyError.Error())
			}
		}
	default:
		log.Printf("SvcSubjectParamsHandler: unknown name %q", name)
		replyError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}

	// encode and send response
	err = nrpc.Publish(resp, replyError, h.nc, msg.Reply, encoding) // error is logged
	if err != nil {
		log.Println("SvcSubjectParamsHandler: SvcSubjectParams handler failed to publish the response: %s", err)
	}
}

type SvcSubjectParamsClient struct {
	nc      *nats.Conn
	PkgSubject string
	PkgParaminstance string
	Subject string
	SvcParamclientid string
	Encoding string
	Timeout time.Duration
}

func NewSvcSubjectParamsClient(nc *nats.Conn, pkgParaminstance string, svcParamclientid string) *SvcSubjectParamsClient {
	return &SvcSubjectParamsClient{
		nc:      nc,
		PkgSubject: "root",
		PkgParaminstance: pkgParaminstance,
		Subject: "SvcSubjectParams",
		SvcParamclientid: svcParamclientid,
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}


func (c *SvcSubjectParamsClient) MtFullReplyMessage(req StringArg) (resp SimpleStringReply, err error) {

	subject := c.PkgSubject + "." + c.PkgParaminstance + "." + c.Subject + "." + c.SvcParamclientid + "." + "MtFullReplyMessage";

	// call
	var reply FullReplyMessage
	err = nrpc.Call(&req, &reply, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	resp = *reply.GetResult()

	return
}
